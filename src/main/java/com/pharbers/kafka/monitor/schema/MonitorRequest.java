/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.pharbers.kafka.monitor.schema;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class MonitorRequest extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 3800064127928841737L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"MonitorRequest\",\"namespace\":\"com.pharbers.kafka.monitor.schema\",\"fields\":[{\"name\":\"connectorName\",\"type\":\"string\"},{\"name\":\"sourceTopic\",\"type\":\"string\"},{\"name\":\"recallTopic\",\"type\":\"string\"},{\"name\":\"strategy\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence connectorName;
  @Deprecated public java.lang.CharSequence sourceTopic;
  @Deprecated public java.lang.CharSequence recallTopic;
  @Deprecated public java.lang.CharSequence strategy;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public MonitorRequest() {}

  /**
   * All-args constructor.
   * @param connectorName The new value for connectorName
   * @param sourceTopic The new value for sourceTopic
   * @param recallTopic The new value for recallTopic
   * @param strategy The new value for strategy
   */
  public MonitorRequest(java.lang.CharSequence connectorName, java.lang.CharSequence sourceTopic, java.lang.CharSequence recallTopic, java.lang.CharSequence strategy) {
    this.connectorName = connectorName;
    this.sourceTopic = sourceTopic;
    this.recallTopic = recallTopic;
    this.strategy = strategy;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return connectorName;
    case 1: return sourceTopic;
    case 2: return recallTopic;
    case 3: return strategy;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: connectorName = (java.lang.CharSequence)value$; break;
    case 1: sourceTopic = (java.lang.CharSequence)value$; break;
    case 2: recallTopic = (java.lang.CharSequence)value$; break;
    case 3: strategy = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'connectorName' field.
   * @return The value of the 'connectorName' field.
   */
  public java.lang.CharSequence getConnectorName() {
    return connectorName;
  }

  /**
   * Sets the value of the 'connectorName' field.
   * @param value the value to set.
   */
  public void setConnectorName(java.lang.CharSequence value) {
    this.connectorName = value;
  }

  /**
   * Gets the value of the 'sourceTopic' field.
   * @return The value of the 'sourceTopic' field.
   */
  public java.lang.CharSequence getSourceTopic() {
    return sourceTopic;
  }

  /**
   * Sets the value of the 'sourceTopic' field.
   * @param value the value to set.
   */
  public void setSourceTopic(java.lang.CharSequence value) {
    this.sourceTopic = value;
  }

  /**
   * Gets the value of the 'recallTopic' field.
   * @return The value of the 'recallTopic' field.
   */
  public java.lang.CharSequence getRecallTopic() {
    return recallTopic;
  }

  /**
   * Sets the value of the 'recallTopic' field.
   * @param value the value to set.
   */
  public void setRecallTopic(java.lang.CharSequence value) {
    this.recallTopic = value;
  }

  /**
   * Gets the value of the 'strategy' field.
   * @return The value of the 'strategy' field.
   */
  public java.lang.CharSequence getStrategy() {
    return strategy;
  }

  /**
   * Sets the value of the 'strategy' field.
   * @param value the value to set.
   */
  public void setStrategy(java.lang.CharSequence value) {
    this.strategy = value;
  }

  /**
   * Creates a new MonitorRequest RecordBuilder.
   * @return A new MonitorRequest RecordBuilder
   */
  public static com.pharbers.kafka.monitor.schema.MonitorRequest.Builder newBuilder() {
    return new com.pharbers.kafka.monitor.schema.MonitorRequest.Builder();
  }

  /**
   * Creates a new MonitorRequest RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new MonitorRequest RecordBuilder
   */
  public static com.pharbers.kafka.monitor.schema.MonitorRequest.Builder newBuilder(com.pharbers.kafka.monitor.schema.MonitorRequest.Builder other) {
    return new com.pharbers.kafka.monitor.schema.MonitorRequest.Builder(other);
  }

  /**
   * Creates a new MonitorRequest RecordBuilder by copying an existing MonitorRequest instance.
   * @param other The existing instance to copy.
   * @return A new MonitorRequest RecordBuilder
   */
  public static com.pharbers.kafka.monitor.schema.MonitorRequest.Builder newBuilder(com.pharbers.kafka.monitor.schema.MonitorRequest other) {
    return new com.pharbers.kafka.monitor.schema.MonitorRequest.Builder(other);
  }

  /**
   * RecordBuilder for MonitorRequest instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<MonitorRequest>
    implements org.apache.avro.data.RecordBuilder<MonitorRequest> {

    private java.lang.CharSequence connectorName;
    private java.lang.CharSequence sourceTopic;
    private java.lang.CharSequence recallTopic;
    private java.lang.CharSequence strategy;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.pharbers.kafka.monitor.schema.MonitorRequest.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.connectorName)) {
        this.connectorName = data().deepCopy(fields()[0].schema(), other.connectorName);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.sourceTopic)) {
        this.sourceTopic = data().deepCopy(fields()[1].schema(), other.sourceTopic);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.recallTopic)) {
        this.recallTopic = data().deepCopy(fields()[2].schema(), other.recallTopic);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.strategy)) {
        this.strategy = data().deepCopy(fields()[3].schema(), other.strategy);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing MonitorRequest instance
     * @param other The existing instance to copy.
     */
    private Builder(com.pharbers.kafka.monitor.schema.MonitorRequest other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.connectorName)) {
        this.connectorName = data().deepCopy(fields()[0].schema(), other.connectorName);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.sourceTopic)) {
        this.sourceTopic = data().deepCopy(fields()[1].schema(), other.sourceTopic);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.recallTopic)) {
        this.recallTopic = data().deepCopy(fields()[2].schema(), other.recallTopic);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.strategy)) {
        this.strategy = data().deepCopy(fields()[3].schema(), other.strategy);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'connectorName' field.
      * @return The value.
      */
    public java.lang.CharSequence getConnectorName() {
      return connectorName;
    }

    /**
      * Sets the value of the 'connectorName' field.
      * @param value The value of 'connectorName'.
      * @return This builder.
      */
    public com.pharbers.kafka.monitor.schema.MonitorRequest.Builder setConnectorName(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.connectorName = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'connectorName' field has been set.
      * @return True if the 'connectorName' field has been set, false otherwise.
      */
    public boolean hasConnectorName() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'connectorName' field.
      * @return This builder.
      */
    public com.pharbers.kafka.monitor.schema.MonitorRequest.Builder clearConnectorName() {
      connectorName = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'sourceTopic' field.
      * @return The value.
      */
    public java.lang.CharSequence getSourceTopic() {
      return sourceTopic;
    }

    /**
      * Sets the value of the 'sourceTopic' field.
      * @param value The value of 'sourceTopic'.
      * @return This builder.
      */
    public com.pharbers.kafka.monitor.schema.MonitorRequest.Builder setSourceTopic(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.sourceTopic = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'sourceTopic' field has been set.
      * @return True if the 'sourceTopic' field has been set, false otherwise.
      */
    public boolean hasSourceTopic() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'sourceTopic' field.
      * @return This builder.
      */
    public com.pharbers.kafka.monitor.schema.MonitorRequest.Builder clearSourceTopic() {
      sourceTopic = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'recallTopic' field.
      * @return The value.
      */
    public java.lang.CharSequence getRecallTopic() {
      return recallTopic;
    }

    /**
      * Sets the value of the 'recallTopic' field.
      * @param value The value of 'recallTopic'.
      * @return This builder.
      */
    public com.pharbers.kafka.monitor.schema.MonitorRequest.Builder setRecallTopic(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.recallTopic = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'recallTopic' field has been set.
      * @return True if the 'recallTopic' field has been set, false otherwise.
      */
    public boolean hasRecallTopic() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'recallTopic' field.
      * @return This builder.
      */
    public com.pharbers.kafka.monitor.schema.MonitorRequest.Builder clearRecallTopic() {
      recallTopic = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'strategy' field.
      * @return The value.
      */
    public java.lang.CharSequence getStrategy() {
      return strategy;
    }

    /**
      * Sets the value of the 'strategy' field.
      * @param value The value of 'strategy'.
      * @return This builder.
      */
    public com.pharbers.kafka.monitor.schema.MonitorRequest.Builder setStrategy(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.strategy = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'strategy' field has been set.
      * @return True if the 'strategy' field has been set, false otherwise.
      */
    public boolean hasStrategy() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'strategy' field.
      * @return This builder.
      */
    public com.pharbers.kafka.monitor.schema.MonitorRequest.Builder clearStrategy() {
      strategy = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public MonitorRequest build() {
      try {
        MonitorRequest record = new MonitorRequest();
        record.connectorName = fieldSetFlags()[0] ? this.connectorName : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.sourceTopic = fieldSetFlags()[1] ? this.sourceTopic : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.recallTopic = fieldSetFlags()[2] ? this.recallTopic : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.strategy = fieldSetFlags()[3] ? this.strategy : (java.lang.CharSequence) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
