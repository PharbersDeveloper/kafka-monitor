<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.pharbers</groupId>
  <artifactId>kafka-monitor</artifactId>
  <version>1.0-SNAPSHOT</version>
  <inceptionYear>2008</inceptionYear>
  <properties>
    <scala.version>2.11.8</scala.version>
    <scalaBinaryVersion>2.11</scalaBinaryVersion>
    <scalatest.version>2.2.5</scalatest.version>
    <log4j.version>2.11.2</log4j.version>
    <jackson.version>2.9.9</jackson.version>
  </properties>

  <repositories>
    <repository>
      <id>scala-tools.org</id>
      <name>Scala-Tools Maven2 Repository</name>
      <url>http://scala-tools.org/repo-releases</url>
    </repository>
  </repositories>

  <pluginRepositories>
    <pluginRepository>
      <id>scala-tools.org</id>
      <name>Scala-Tools Maven2 Repository</name>
      <url>http://scala-tools.org/repo-releases</url>
    </pluginRepository>
  </pluginRepositories>

  <dependencies>
    <dependency>
      <groupId>com.pharbers</groupId>
      <artifactId>pharbers-kafka</artifactId>
      <version>1.0</version>
    </dependency>
    <!-- https://mvnrepository.com/artifact/org.scalaj/scalaj-http -->
    <dependency>
      <groupId>org.scalaj</groupId>
      <artifactId>scalaj-http_2.11</artifactId>
      <version>2.4.2</version>
    </dependency>

    <!--json-->
    <dependency>
      <groupId>com.fasterxml.jackson.core</groupId>
      <artifactId>jackson-core</artifactId>
      <version>${jackson.version}</version>
    </dependency>
    <dependency>
      <!-- Note: core-annotations version x.y.0 is generally compatible with
           (identical to) version x.y.1, x.y.2, etc. -->
      <groupId>com.fasterxml.jackson.core</groupId>
      <artifactId>jackson-annotations</artifactId>
      <version>${jackson.version}</version>
    </dependency>
    <dependency>
      <groupId>com.fasterxml.jackson.core</groupId>
      <artifactId>jackson-databind</artifactId>
      <version>${jackson.version}</version>
    </dependency>

    <!--httpClient-->
    <!-- https://mvnrepository.com/artifact/com.squareup.okhttp3/okhttp -->
    <!--<dependency>-->
      <!--<groupId>com.squareup.okhttp3</groupId>-->
      <!--<artifactId>okhttp</artifactId>-->
      <!--<version>4.0.1</version>-->
    <!--</dependency>-->

    <!--log4j-->
    <dependency>
      <groupId>org.apache.logging.log4j</groupId>
      <artifactId>log4j-api</artifactId>
      <version>${log4j.version}</version>
    </dependency>
    <dependency>
      <groupId>org.apache.logging.log4j</groupId>
      <artifactId>log4j-core</artifactId>
      <version>${log4j.version}</version>
    </dependency>

    <!--test-->
    <dependency>
      <groupId>org.scalatest</groupId>
      <artifactId>scalatest_${scalaBinaryVersion}</artifactId>
      <version>${scalatest.version}</version>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <build>
    <sourceDirectory>src/main/scala</sourceDirectory>
    <testSourceDirectory>src/test/scala</testSourceDirectory>
    <resources>
      <resource>
        <directory>pharbers_config</directory>
        <includes>
          <include>**/*.xml</include>
          <include>**/*.json</include>
        </includes>
      </resource>
    </resources>
    <plugins>
      <!--自动测试-->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>2.7</version>
        <configuration>
          <skipTests>true</skipTests>
        </configuration>
      </plugin>

      <!--scala支持-->
      <plugin>
        <groupId>org.scala-tools</groupId>
        <artifactId>maven-scala-plugin</artifactId>
        <version>2.15.2</version>
        <executions>
          <execution>
            <id>scala-compile-first</id>
            <goals>
              <goal>compile</goal>
            </goals>
            <configuration>
              <includes>
                <include>**/*.scala</include>
              </includes>
            </configuration>
          </execution>
          <execution>
            <id>scala-test-compile</id>
            <goals>
              <goal>testCompile</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <!--主类声明-->
     <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-jar-plugin</artifactId>
        <configuration>
          <archive>
            <manifest>
              <addClasspath>true</addClasspath>
              <classpathPrefix>lib/</classpathPrefix><!--声明主类使用类库的相对目录名称-->
              <mainClass>com.pharbers.kafka.monitor.main</mainClass>
            </manifest>
          </archive>
        </configuration>
      </plugin>

      <!--依赖类库复制插件-->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-dependency-plugin</artifactId>
        <executions>
          <execution>
            <id>copy-dependencies</id>
            <phase>prepare-package</phase>
            <goals>
              <goal>copy-dependencies</goal>
            </goals>
            <configuration>
              <!--${project.build.directory}是项目构建完成后的根目录，可执行的Jar在此目录-->
              <outputDirectory>${project.build.directory}/lib</outputDirectory>
              <overWriteReleases>false</overWriteReleases>
              <overWriteSnapshots>false</overWriteSnapshots>
              <overWriteIfNewer>true</overWriteIfNewer>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <!--打包配置文件-->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-resources-plugin</artifactId>
        <executions>
          <execution>
            <id>copy-resources</id>
            <phase>package</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <encoding>UTF-8</encoding>
              <!--打成jar包后复制到的路径-->
              <outputDirectory>
                ${project.build.directory}/pharbers_config
              </outputDirectory>
              <resources>
                <resource>
                  <!--项目中的路径-->
                  <directory>pharbers_config</directory>
                </resource>
              </resources>
            </configuration>
          </execution>
          <!--可配置多个提取复制路径只需要 “<id>”名字不一样即可-->
        </executions>
      </plugin>

      <!--dockerfile-->
      <!--<plugin>-->
        <!--<groupId>com.spotify</groupId>-->
        <!--<artifactId>dockerfile-maven-plugin</artifactId>-->
        <!--<version>1.4.10</version>-->
        <!--<executions>-->
          <!--<execution>-->
            <!--<id>default</id>-->
            <!--<goals>-->
              <!--<goal>build</goal>-->
              <!--<goal>push</goal>-->
            <!--</goals>-->
          <!--</execution>-->
        <!--</executions>-->
        <!--<configuration>-->
          <!--<repository>spotify/foobar</repository>-->
          <!--<tag>${project.version}</tag>-->
          <!--<buildArgs>-->
            <!--<JAR_FILE>${project.build.finalName}.jar</JAR_FILE>-->
          <!--</buildArgs>-->
        <!--</configuration>-->
      <!--</plugin>-->
    </plugins>
  </build>
</project>
